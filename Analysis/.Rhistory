?likert
View(New2013)
View(New2013)
new1 <- subset( New2013[,6..8])
new1 <- subset( New2013[,6:8])
plot(likert(new1))
plot(likert(new1[,1]))
install.packages('likert',repos='http://cran.r-project.org')
require(likert)
?likert
plot(likert(new1))
plot(likert(new1[,1]))
plot(likert(new1),nlevels=5)
plot(likert(new1[,1],nlevels=5))
`2013Stud` <- read.csv("~/Dropbox/Orientation Survey Data/2013/2013 Data CSV/2013Stud.csv")
View(`2013Stud`)
stud13 <- `2013Stud`
install.packages("car")
library(car)
stud13$Q1<-recode(stud13$Q1,"-1='No respone';0=`N/A'")
stud13$Q1<-recode(stud13$Q1,"-1='No respone';0='N/A'")
View(stud13)
stud13$Q1<-recode(stud13$Q1,"-1='No Respone';0='N/A';1='Stongly Disagree';2='Disagree';3='Neutral';4='Agree';5='Strongly Agree'")
View(stud13)
stud13[,1:1071]<-recode(stud13[,1:1071],"-1='No Respone';0='N/A';1='Stongly Disagree';2='Disagree';3='Neutral';4='Agree';5='Strongly Agree'")
?recode
for (i in 1:20) {}
for (i in 6:25) {stud13[,i]<-recode(stud13[,i],"-1='No Respone';0='N/A';1='Stongly Disagree';2='Disagree';3='Neutral';4='Agree';5='Strongly Agree'")}
View(stud13)
save.image("~/Dropbox/Orientation Survey Data/2013/2013 Data CSV/stud13R/Untitled.RData")
plot(stud13$Q1)
barplot(stud13$Q1)
?barplot
?plot
?barplot
?subset
?subset
mdata <- subset(stud13,stud13[,6]=='Strongly Disagree' | stud13[,6]=='Disagree' | stud13[,6]=='Neutral' | stud13[,6]=='Agree' | stud13[,6]=='Strongly Agree' )
require(likert)
summary(likert(mdata$Q1))
>likert
?likert
?substr
?likert
mdata <- stud13[,substr(names(stud13),1,1)=='Q']
ldata <- likert(mdata)
ldata <- likert(mdata,nlevels=7)
xdata <- stud13[,6]
ydata <- likert(xdata)
stud13$Q1
load("~/Dropbox/Orientation Survey Data/2013/2013 Data CSV/stud13R/AnotherTest.RData")
View(stud13)
View(`2013Stud`)
load("~/Dropbox/Orientation Survey Data/2013/2013 Data CSV/stud13R/AnotherTest.RData")
ldata
load("~/Dropbox/Orientation Survey Data/2013/2013 Data CSV/stud13R/AnotherTest.RData")
load("~/Dropbox/Orientation Survey Data/2013/2013 Data CSV/stud13R/AnotherTest.RData")
view(stu13)
View(stu13)
library("KernSmooth", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
?trellis.par.set
library(datasets)
data(airquality)
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
library("ggplot2", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies, smooth = "loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies) + geom_smooth()
View(`2013Stud`)
x<-subset(,6:26)
x<-stud13[,6:26]
ma<- as.matrix(x)
heatmap(ma)
ma<- as.matrix(as.numeric(x)
)
x<-stud13[,as.numeric(6:26)]
ma<- as.matrix(x)
heatmap(ma)
ma<- as.numeric(as.matrix(x))
heatmap(ma)
str(ma)
x<-stud13[,as.numeric(6:26)]
str(x)
x<-'2013Stud'
x<-2013Stud
View(`2013Stud`)
x<-`2013Stud`
View(x)
x<-x[,6:26]
ma<- as.matrix(x)
heatmap(ma)
str(ma)
x<-`2013Stud`
x<-x[,6:25]
ma<- as.matrix(x)
heatmap(ma)
binom.test(3,4,1/2)
View(stud13)
table(stud13[,6])
x <- c(0.586, 0.166, -0.042, -0.614, 11.72)
y <- c(0.549, -0.026, -0.127, -0.751, 1.344)
fit<-lm(y~x)
hatvalues(fit)
dfbetas(fit)
install.packages("lmtest")
library("lmtest", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
data(mtcars)
attach(mtcars)
View(mtcars)
fit1<-lm(mpg ~ factor(cyl)+wt,mtcars)
fit2<-lm(mpg ~ factor(cyl)+wt + factor(cyl)*wt,mtcars)
lrtest(fit1,fit2)
lrtest(fit1,fit1)
lrtest(fit2,fit1)
?lrtest
anova(fit1,fit2)
library(MASS)
attach(shuttle)
df<-shuttle
View(df)
logRegShut<- glm(use ~ wind, data = shuttle, family = "binomial")
summary(logRegShut)
logRegShut$coeff
exp(logRegShut$coeff)
logRegShut<- glm(use ~ wind + magn, data = shuttle, family = "binomial")
exp(logRegShut$coeff)
logRegShut<- glm(I(1- use) ~ wind + magn, data = shuttle, family = "binomial")
library(car)
shuttle$use1<- recode(shuttle$use,"'auto'==1,'noauto'==0")
shuttle$use1<- recode(shuttle$use,"'auto'=1,'noauto'=0")
shuttle$use1<- recode(shuttle$use,"'auto'=1;'noauto'=0")
View(shuttle)
logRegShut<- glm(use1 ~ wind + magn, data = shuttle, family = "binomial")
exp(logRegShut$coeff)
logRegShut<- glm(use1 ~ wind, data = shuttle, family = "binomial")
exp(logRegShut$coeff)
shuttle$use2<- recode(shuttle$use,"'auto'=0;'noauto'=1")
logRegShut<- glm(use1 ~ wind, data = shuttle, family = "binomial")
exp(logRegShut$coeff)
logRegShut<- glm(use ~ wind, data = shuttle, family = "binomial")
exp(logRegShut$coeff)
View(shuttle)
logRegShut<- glm(factor(use) ~ factor(wind), data = shuttle, family = "binomial")
exp(logRegShut$coeff)
logRegShut<- glm(factor(use1) ~ factor(wind), data = shuttle, family = "binomial")
exp(logRegShut$coeff)
data(InsectSprays)
str(InsectSprays)
View(InsectSprays)
?InsectSprays
glm1<- glm(count~factor(spray),data = InsectSprays, offset = log(count+1),family="poison")
glm1<- glm(count~factor(spray),data = InsectSprays, offset = log(count+1),family="poisson")
summary(glm1)
glm1<- glm(count~factor(spray),data = InsectSprays,family="poisson")
summary(glm1)
exp(.05588)
knots<- 0
splineTerms<- sapply(knots, function(knot) (x > knot) * (x - knot))
View(splineTerms)
n<- 500; x<- seq(-5,5,length=n)
knots<- c(0)
splineTerms<- sapply(knots, function(knot) (x > knot) * (x - knot))
View(splineTerms)
xMat<- cbind(1,x,splineTerms)
View(splineTerms)
library(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
library(AppliedPredictiveModeling)
library(caret)
install.packages("caret")
library(caret)
data(AlzheimerDisease)
?creatDataPartition
?createDataPartition
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
plot(training$CompressiveStrength,pch=19)
plot(training$CompressiveStrength,pch=19,color=training[,1])
plot(training$CompressiveStrength,pch=19,colour=training[,1])
?plot
plot(training$CompressiveStrength,pch=19,col=training[,1])
plot(training$CompressiveStrength,pch=19)
?cut2
library("Hmisc", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?cut2
set.seed(126)
training$Cem<- cut2(training[,1],g=4)
View(training)
plot(training$CompressiveStrength,pch=19,col=training[,10])
training$fly<- cut2(training[,3],g=4)
plot(training$CompressiveStrength,pch=19,col=training[,11])
cor(training[,9],training[,3])
set.seed(975)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
View(training)
hist(training[,5])
hist(training$Superplasticizer)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(training)
colnames(training)
newdf<-training[,58:69]
View(newdf)
sapply(newdf,min)
min(sapply(newdf,min))
pre<- preProcess(log10(newdf[,1:12]+9.52),method="pca",pcaComp=2)
pre
?preProcess
dim(pre)
rotation(pre)
pre[1]
pre[2]
pre[6]
pre[10]
pre[12]
pre<- preProcess(log10(newdf[,1:12]+9.52),method="pca",thresh=0.9)
pre[12]
pre[6]
pre[8]
pre
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
View(adData)
newtrain<- cbind(traning[,1],training[,58:69])
newtrain<- cbind(training[,1],training[,58:69])
View(newtrain)
newtrain<- cbind(training[,1:1],training[,58:69])
View(newtrain)
newtrain<- training[,c(1,58:69)]
View(newtrain)
newtest<- testing[,c(1,58:69)]
modfit<- train(diagnosis ~ ., method="glm", data=newtrain)
install.packages("e1071")
library("e1071", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
modfit<- train(diagnosis ~ ., method="glm", data=newtrain)
modfit
predict(modfit,newtest)
pred<- predict(modfit,newtest)
pred
confusionMatrix(pred,newtest$diagnosis)
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
View(segmentationOriginal)
inTrain <- createDataPartition(y=segmentationOriginal$Case,p=0.7,list=FALSE)
train<- segmentationOriginal[inTrain,]
test<- segmentationOriginal[-inTrain,]
set.seed(125)
modfit<- train(segmentationOriginal$Case~., data=train, method="rpart")
modfit<- train(Case ~ ., data=train, method="rpart")
View(segmentationOriginal)
new<-test[c(1:4)]
new$TotalIntench2[1]<- 23000
View(new)
new<-test[1:4,]
new$TotalIntench2[1]<- 23000
View(new)
table(segmentationOriginal$TotalIntench2)
table(segmentationOriginal$Tot)
train<- segmentationOriginal[Case=="Train",]
train<- segmentationOriginal[which(Case=="Train"),]
train<- segmentationOriginal[which(segmentationOriginal$Case=="Train"),]
test<- segmentationOriginal[which(segmentationOriginal$Case=="Test"),]
modfit<- train(Class ~ ., data=train, method="rpart")
new<- subset(test, FiberWidthCh1 == 8 & VarIntenCh4 == 100 &PerimStatusCh1==2 )
View(new)
new<- subset(segmentationOriginal, FiberWidthCh1 == 8 & VarIntenCh4 == 100 &PerimStatusCh1==2 )
View(new)
new<- test[1:4,]
library(car)
new$FiberWidthCh1[1] <- 8;new$VarIntenCh4[1] <- 100; new$PerimStatusCh1[1]<-2
View(new)
View(segmentationOriginal)
load(mtcars)
mtcars
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y<- factor(vowel.train$y)
vowel.test$y<- factor(vowel.test$y)
set.seed(33833)
modfit1<- train(y~., data = vowel.train, method = "rf")
library("caret", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
modfit1<- train(y~., data = vowel.train, method = "rf")
modfit2<- train(y~., data = vowel.train, method = "gbm")
modfit1
pred1<- predict(modfit1, vowel.train)
pred2<- predict(modfit2, vowel.train)
pred1<- predict(modfit1, vowel.test)
pred2<- predict(modfit2, vowel.test)
confusionMatrix(pred1, vowel.test$y)
confusionMatrix(pred2, vowel.test$y)
confusionMatrix(pred2, pred1)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
modfit1<- train(diagnosis ~., data = AlzheimerDisease, method = "rf")
modfit1<- train(diagnosis ~., data = adData, method = "rf")
modfit2<- train(diagnosis ~., data = adData, method = "gbm")
modfit3<- train(diagnosis ~., data = adData, method = "lda")
pred1<- predict(modfit1, adData$diagnosis)
View(adData)
pred1<- predict(modfit2, adData$diagnosis)
modfit1
pred1<- predict(modfit1, adData$diagnosis)
modfit1$pred
pred1<- predict(modfit1, adData$diagnosis)
modfit1<- train(diagnosis ~., data = training, method = "rf")
modfit1<- train(diagnosis ~., data = training, method = "rf", trControl = trainControl(method="cv"),number=3)
modfit2<- train(diagnosis ~., data = training, method = "gbm")
modfit3<- train(diagnosis ~., data = training, method = "lda")
pred1<-predict(modfit1,testing)
pred2<-predict(modfit2,testing)
pred3<-predict(modfit3,testing)
predDF <- data.frame(pred1,pred2,pred3,diagnosis = testing$diagnosis)
combModfit<- train(diagnosis ~. method="gam", data = predDF)
combModfit<- train(diagnosis ~., method="gam", data = predDF)
predComb<- predict(combModfit,predDF)
set.seed(62433)
modfit1<- train(diagnosis ~., data = training, method = "rf", trControl = trainControl(method="cv"),number=3)
modfit2<- train(diagnosis ~., data = training, method = "gbm")
modfit3<- train(diagnosis ~., data = training, method = "lda")
pred1<-predict(modfit1,testing)
pred2<-predict(modfit2,testing)
pred3<-predict(modfit3,testing)
predDF <- data.frame(pred1,pred2,pred3,diagnosis = testing$diagnosis)
combModfit<- train(diagnosis ~. method="gam", data = predDF)
combModfit<- train(diagnosis ~., method="gam", data = predDF)
predComb<- predict(combModfit,predDF)
confusionMatrix(predComb,testing)
confusionMatrix(predComb,testing$diagnosis)
confusionMatrix(pred1,testing$diagnosis)
confusionMatrix(pred2,testing$diagnosis)
confusionMatrix(pred3,testing$diagnosis)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
set.seed(233)
?plot.enet
install.packages("elasticnet")
library("elasticnet", lib.loc="/Library/Frameworks/R.framework/Versions/3.0/Resources/library")
?plot.enet
View(training)
modfit<-train(CompressiveStrength~., data=training, method="lasso")
data(diabetes)
obj<-enet(training$CompressiveStrength, training[,1:8], lambda=0)
obj<-enet(training$CompressiveStrength, training[c(1:8)], lambda=0)
plot(modfit)
modfit
modfit$finalModel
plot(modfit$finalModel)
load("~/Dropbox/Orientation Survey Data/2014/Summer 2014 Parent/Working Space Hero.RData")
load("~/Dropbox/Orientation Survey Data/2014/Summer 2014 Parent/working space hero 2.RData")
table(totPrcq21)
table(totP$rcq21)
table(totP$rcq22)
t<-subset(totP,totP$rcq22=="begin")
View(t)
table(totP$cat)
table(t$cat)
s<-subset(totP,totP$rcq21=="open")
View(s)
s<-subset(totP,totP$rcq21=="partner")
View(s)
table(s$type)
s<-subset(totP,totP$rcq21=="open")
table(s$type)
s<-subset(totP,totP$rcq21=="dean")
View(s)
table(s$cat)
s<-subset(totP,totP$rcq21=="finan")
View(s)
table(s$type)
t<-subset(totP,totP$rcq22=="finan")
View(t)
table(t$type)
t<-subset(totP,totP$rcq22=="food")
View(t)
table(t$race)
t<-subset(totP,totP$rcq22=="socmed")
View(t)
s<-subset(totP,totP$rcq21=="socmed")
View(s)
p<-subset(totP,totP$type == "First-Year" | totP$type == "Transfer" )
table(p$rcq21)
table(p$rcq22)
p<-subset(totP,totP$type == "First-Year" )
s<-subset(p,totP$rcq21=="shiphappens")
View(s)
table(s$cat)
p<-subset(totP,totP$type == "ASP" )
table(p$rcq21)
table(p$rcq22)
s<-subset(p,totP$rcq21=="panel")
s<-subset(p,rcq21=="panel")
View(s)
s<-subset(totP,rcq21=="panel")
View(s)
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
getwd()
setwd("~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data")
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
source('~/.active-rstudio-document')
setwd("~/Dropbox/SU_DataScienceCenter/FirstExampleProject")
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
getwd()
source('~/.active-rstudio-document')
setwd(paste(getwd(),"/Analysis/Data",sep=""))
getwd()
setwd("~/Dropbox/SU_DataScienceCenter/FirstExampleProject")
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
setwd("~/Dropbox/SU_DataScienceCenter/FirstExampleProject")
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
setwd(../)
setwd("../")
getwd()
setwd("../")
getwd()
source('~/.active-rstudio-document')
getwd()
setwd("../")
setwd("../")
getwd()
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
source('~/.active-rstudio-document')
getwd()
setwd("Analysis/Data")
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/Make.R')
main_data <- read.csv("~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/main_data.csv", stringsAsFactors=FALSE)
View(main_data)
main_data <- read.csv("~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Data/main_data.csv", stringsAsFactors=FALSE)
View(main_data)
table(main_data$Day,main_data$cutoff)
?xtable
xtable(main_data$Day,main_data$cutoff)
xtable(table(main_data$Day,main_data$cutoff))
getwd()
setwd("../")
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Table.R')
tab
source('~/.active-rstudio-document')
barplot(main_data$Score)
barplot(file=main_data,Score)
?barplot
par(mfrow=c(2,2))
barplot(main_data[1:10,2])
day1 <- main_data[1:10,2]
barplot(day1)
barplot(main_data$Score)
barplot(main_data$Score)
day1 <- main_data[1:10,]
barplot(day1$Score)
par(mfrow=c(2,2))
barplot(day1$Score)
day2 <- main_data[11:22,]
par(mfrow=c(2,1))
barplot(day1$Score)
barplot(day2$Score)
barplot(day2$Score)
barplot(day1$Score)
par(mfrow=c(2,1))
barplot(day1$Score)
barplot(day2$Score)
par(mfrow=c(2,1))
barplot(day1$Score, main="Test Scores For Day 1")
barplot(day2$Score, main="Test Scores For Day 2")
source('~/Dropbox/SU_DataScienceCenter/FirstExampleProject/Analysis/Barplot.R')
?source
